import os
import requests
from flask import Flask, render_template, request, jsonify
from dotenv import load_dotenv
import urllib3
from flask_sqlalchemy import SQLAlchemy

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

load_dotenv()

app = Flask(__name__)

# Load Gemini API Key
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise ValueError("GEMINI_API_KEY is not set in environment variables")

# Configure SQLite Database for storing ratings
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///ratings.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# Define the Rating model
class Rating(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_message = db.Column(db.Text, nullable=False)
    bot_response = db.Column(db.Text, nullable=False)
    rating = db.Column(db.Integer, nullable=False)

    def __init__(self, user_message, bot_response, rating):
        self.user_message = user_message
        self.bot_response = bot_response
        self.rating = rating

# Initialize the database
with app.app_context():
    db.create_all()

# Define Gemini API endpoint
gemini_api_url = "https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent"

@app.route('/')
def home():
    return render_template('GUI.html')

@app.route('/get_response', methods=['POST'])
def get_response():
    try:
        user_message = request.json.get('message', '').strip()
        if not user_message:
            return jsonify({'error': 'Please provide a message'}), 400

        # Prepare the request payload for Gemini API
        payload = {
            "contents": [{
                "parts": [{
                    "text": user_message
                }]
            }]
        }

        headers = {"Content-Type": "application/json"}
        params = {"key": GEMINI_API_KEY}

        # Make the API request
        response = requests.post(
            gemini_api_url,
            json=payload,
            headers=headers,
            params=params,
            verify=False  # SSL verification disabled
        )
        
        if response.status_code == 200:
            response_data = response.json()
            if 'candidates' in response_data:
                bot_message = response_data['candidates'][0]['content']['parts'][0]['text']
                return jsonify({'response': bot_message})
            else:
                return jsonify({'error': 'Unexpected response structure'}), 500
        else:
            return jsonify({'error': f'API Error: {response.text}'}), response.status_code

    except requests.exceptions.RequestException as e:
        return jsonify({'error': f'Network error: {str(e)}'}), 503
    except Exception as e:
        return jsonify({'error': f'Server error: {str(e)}'}), 500

@app.route('/rate_response', methods=['POST'])
def rate_response():
    try:
        # Retrieve data from the request
        data = request.json
        user_message = data.get('user_message', '').strip()
        bot_response = data.get('bot_response', '').strip()
        rating = data.get('rating')

        if not user_message or not bot_response or rating is None:
            return jsonify({'error': 'Incomplete data provided'}), 400

        # Save the rating to the database
        new_rating = Rating(user_message=user_message, bot_response=bot_response, rating=rating)
        
        db.session.add(new_rating)
        db.session.commit()

        return jsonify({'message': 'Rating submitted successfully'}), 201

    except Exception as e:
        return jsonify({'error': f'Server error: {str(e)}'}), 500

if __name__ == '__main__':
    app.run(debug=True)
